package persistence.accounts;

import persistence.RelationBroker;
import problemDomain.accounts.MagicianAccount;

import java.sql.CallableStatement;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;

import exceptions.IllegalEmailException;
import exceptions.IllegalNameException;

/**
 * @author Ryan Young 000698795
 * @version 1.0
 *
 * Class description: An implementation of the abstract Broker interface that controls
 * how the Administators of the system interact with the database. 
 */
public class AdminBroker
{
	//Constants
	//Attributes
	
	//Getter and Setter Methods
	//Operational Methods

	/**
	 * Returns a list of all Magicians in the system to display to the Administrator
	 * @return a list containing the Id, Name and Email of all magicians in the system.
	 * Precondition: the ManageMagicians.jsp page needs a list of magicians.
	 * Postcondition: the returned information is passed to the AdminController for formatting. 
	 */
	public ArrayList<MagicianAccount> getMagicianList()
	{
		RelationBroker broker = RelationBroker.getBroker();
		try(Connection conn = broker.getConnection())
		{
			try(CallableStatement cs = conn.prepareCall("call getMagicianList()"))
			{				
				cs.execute();
				
				ArrayList<MagicianAccount> magicianList = new ArrayList<>();
				
				try(ResultSet rs = cs.getResultSet())
				{
					
					while(rs.next())
					{
						int magicianId = rs.getInt(1);
						String name = rs.getString(2);
						String email = rs.getString(3);
						MagicianAccount magician = new MagicianAccount(magicianId, name, email);
						magicianList.add(magician);
					}
					
					return magicianList;
				}
			}
		}
		catch (SQLException|IllegalNameException|IllegalEmailException e)
		{
			e.printStackTrace();
			return null;
		}
	}

	/**
	 * A method used to add a new Magician to the system.
	 * @param name the Name of the Magician
	 * @param email the email of the Magician.
	 * @param password the password generated by the system.
	 * @param price30 the price of a 30 min show.
	 * @param price45 the price of a 45 min show.
	 * @param price60 the price of a 60 min show.
	 * @param priceCorporate the price of a corporate show.
	 * @param priceSchool the price of a school show.
	 * @return whether the magician was added or not.
	 * Precondition: All neccessary information is passed to the system.
	 * Postcondition: A magician has been added to the system.
	 */
	public boolean addMagician(MagicianAccount magician, String password, double price30, double price45, double price60,
			double priceCorporate, double priceSchool)
	{
		RelationBroker broker = RelationBroker.getBroker();
		try(Connection conn = broker.getConnection())
		{
			try(CallableStatement cs = conn.prepareCall("call addMagician(?,?,?,?,?,?,?,?)"))
			{
				cs.setString(1, magician.getName());
				cs.setString(2, magician.getEmail());
				cs.setString(3, password);
				cs.setDouble(4, price30);
				cs.setDouble(5, price45);
				cs.setDouble(6, price60);
				cs.setDouble(7, priceSchool);
				cs.setDouble(8, priceCorporate);
			
				cs.executeUpdate();
			
				return true;
			}
		}
		catch (SQLException e)
		{
			return false;
		}		
	}

	/**
	 * A method to reset a Magicians password.
	 * @param id the id of the magician to reset the password for.
	 * @return whether the password was reset successfully.
	 * Precondition: a link is pressed signalling that the magician requires a new password.
	 * Postcondition: a boolean is returned representing whether the password was reset.
	 */
	public boolean resetMagicianPassword(int id)
	{
		RelationBroker broker = RelationBroker.getBroker();
		try(Connection conn = broker.getConnection())
		{
			try(CallableStatement cs = conn.prepareCall("call resetMagicianPassword(?)"))
			{
				cs.setInt(1, id);
				
				cs.execute();
				
				cs.close();
				return true;	
			}
		}
		catch (SQLException e)
		{
			e.printStackTrace();
			return false;
		}
	}

	/**
	 * A method to delete a Magician from the system.
	 * @param id the id of the Magician to be deleted.
	 * @return the filepath of the image of the magician, used to delete the image from the server.
	 * Precondition: a link is pressed signalling to the system that a magician is to be deleted.
	 * Postcondition: A magician is deleted and a filename is passed back to the system.
	 */
	public String deleteMagician(int id)
	{
		RelationBroker broker = RelationBroker.getBroker();
		try(Connection conn = broker.getConnection())
		{
			try(CallableStatement cs = conn.prepareCall("call deleteMagician(?)"))
			{
				cs.setInt(1, id);

				cs.execute();
				
				try(ResultSet rs = cs.getResultSet())
				{
					if(rs.next())
					{
						return rs.getString(1);
					}
					else
					{
						return null;
					}
				}
			}
		}
		catch (SQLException e)
		{
			e.printStackTrace();
			return null;
		}
	}
}
